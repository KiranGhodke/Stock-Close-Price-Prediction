# -*- coding: utf-8 -*-
"""Closing price prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KXU40DQGuS3Y0lzu_QOUSJzIAGTVcB_u
"""

# This uses an artificial recurrent neural network called Long Short Term Memory (LSTM)
# to predict the cloing stock price of a corporation (RAYMOND) using past 60 day stock price
import math
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#Get the stock quote
df = web.DataReader('RAYMOND.NS', data_source='yahoo', start='2012-01-01', end='2020-11-17')
# Show the data
df

df.shape

# Visualization of closing price history
plt.figure(figsize=(16,8))
plt.title('Close Price History')
plt.plot(df['Close'])
plt.xlabel('Date', fontsize= 18)
plt.ylabel('Close Price Rs (₹)', fontsize=18)
plt.show()

#Creating a new dataframe for only Close column
data = df.filter(['Close'])
#Converting the dataframe to a numpy array
dataset = data.values
#Getting the number rows to train the model 
training_data_len = math.ceil( len(dataset) * .8)
training_data_len

#Scalling the data (its a good practice to always scale data before presenting it to the LSTM)
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)
#scaler.fit_transform computes the min and max values used for scaling and transform the data based on (0,1)values

scaled_data

#create a training data set
# create the scaled training data
train_data = scaled_data[0:training_data_len]
#split the data in x_train and y_train dataset
x_train = []
y_train = []

for i in range(60, len(train_data)):
  x_train.append(train_data[i-60:i, 0])
  y_train.append(train_data[i, 0])
  # first passthrough x_train will have past 60 values for 0-59 aand y_train will have 61st value at 60 that we
  # want our model to predict
  if i<= 60:
    print(x_train)
    print(y_train)
    print()

#convert the x_train and y_train to numpy array
x_train, y_train = np.array(x_train), np.array(y_train)

#Reshape the data
#why? LSTM expects the input to be in 3 dimensional in the form of (number of samples, number of features, and number of time steps)
# and rn x_train is in 2 dimension
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
x_train.shape

#Build LSTM model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(LSTM(50, return_sequences= False))
model.add(Dense(25))
model.add(Dense(1))

#COmpile the model
model.compile(optimizer='adam', loss='mean_squared_error')

#train the model
model.fit(x_train, y_train, batch_size=1, epochs=1)
#epochs is the number of iterations when an entire dataset is passed forward and backward through the moedel

#create the testing dataset
#create a new array containing scaled values from index 1689 to 2186
test_data = scaled_data[training_data_len - 60: , :]
#create the data sets x_test and y_test
x_test = []
y_test = dataset[training_data_len:, :]
for i in range(60, len(test_data)):
  x_test.append(test_data[i-60:i, 0])

#convert the data to a numpy array
x_test = np.array(x_test)

#Reshape the data
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1 ))

#Prediction of price values for x_test
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)
#we want predictions dataset to have the same values as our y_test dataset

#Get the root mean squared error (RMSE)
rmse = np.sqrt(np.mean( predictions - y_test)**2)
rmse
#

#Plot the data
train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions
#Visualize the data
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close Price Rs (₹)', fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train', 'Valid', 'Predictions'], loc='lower right')
plt.show()

#show the valid and predicted prices
valid

#Get the quote 
Raymond_quote = web.DataReader('RAYMOND.NS', data_source='yahoo', start='2012-01-01', end='2020-11-17')
#Create a new dataframe
new_df = Raymond_quote.filter(['Close'])
#get the last 60 days closing price values and convert the dataframe into arrays
last_60_days = new_df[-60:].values
#Scale the data to be values between 0 and 1
last_60_days_scaled = scaler.transform(last_60_days)
#Create an empty list
X_test = []
#Append the past 60 days
X_test.append(last_60_days_scaled)
#convert the X_test to array
X_test = np.array(X_test)
#Reshape the data
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
##get pred scaled price
pred_price = model.predict(X_test)
#undo the scaling
pred_price = scaler.inverse_transform(pred_price)
print(pred_price)

#Actual
Raymond_quote2 = web.DataReader('RAYMOND.NS', data_source='yahoo', start='2020-11-18', end='2020-11-18')
print(Raymond_quote2['Close'])

from sklearn.metrics import classification_report

history = model.fit(x_train, y_train, batch_size=32, epochs=10, verbose=1, validation_data=(x_test, y_test), shuffle=True)
pred = model.predict(x_test, batch_size=32, verbose=1)
predicted = np.argmax(pred, axis=1)
report = classification_report(np.argmax(y_test, axis=1), predicted)
print(report)

"""Not a great performance measure"""